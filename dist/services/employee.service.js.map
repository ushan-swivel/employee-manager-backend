{"version":3,"sources":["../../src/services/employee.service.ts"],"sourcesContent":["import { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { Employee } from '@interfaces/employee.interface';\nimport employeeModel from '@models/employee.model';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public employees = employeeModel;\n\n  public async findAllUser(): Promise<Employee[]> {\n    const users: Employee[] = await this.employees.find();\n    return users;\n  }\n\n  public async findUserById(employeeId: string): Promise<Employee> {\n    if (isEmpty(employeeId)) throw new HttpException(400, 'Employee Id is empty');\n\n    const findUser: Employee = await this.employees.findOne({ _id: employeeId });\n    if (!findUser) throw new HttpException(409, \"Employee doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createEmployee(userData: CreateUserDto): Promise<Employee> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    const findUser: Employee = await this.employees.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const createUserData: Employee = await this.employees.create({ ...userData });\n\n    return createUserData;\n  }\n\n  public async updateEmployee(userId: string, userData: CreateUserDto): Promise<Employee> {\n    if (isEmpty(userData)) throw new HttpException(400, 'userData is empty');\n\n    if (userData.email) {\n      const findUser: Employee = await this.employees.findOne({ email: userData.email });\n      if (findUser && findUser._id != userId) throw new HttpException(409, `This email ${userData.email} already exists`);\n    }\n    const updateUserById: Employee = await this.employees.findByIdAndUpdate(userId, { userData });\n    if (!updateUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return updateUserById;\n  }\n\n  public async deleteEmployee(userId: string): Promise<Employee> {\n    const deleteUserById: Employee = await this.employees.findByIdAndDelete(userId);\n    if (!deleteUserById) throw new HttpException(409, \"User doesn't exist\");\n\n    return deleteUserById;\n  }\n}\n\nexport default UserService;\n"],"names":["UserService","findAllUser","users","employees","find","findUserById","employeeId","isEmpty","HttpException","findUser","findOne","_id","createEmployee","userData","email","createUserData","create","updateEmployee","userId","updateUserById","findByIdAndUpdate","deleteEmployee","deleteUserById","findByIdAndDelete","employeeModel"],"mappings":"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"}